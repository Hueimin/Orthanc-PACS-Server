# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DICOM.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os, sys, os.path, httplib2, merge, webbrowser 
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtWidgets import QVBoxLayout, QPushButton, QFormLayout, QGroupBox
from functools import partial

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 640)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 30, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(30, 80, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setEnabled(False)
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(210, 30, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(340, 30, 331, 31))
        self.lineEdit.setObjectName("lineEdit")
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(680, 30, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(14)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(210, 70, 551, 521))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 549, 519))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.scrollArea.setFont(font)
        
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(30, 130, 151, 461))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setText("XML file：\n\n\nDICOM file：\n")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
# =========================================================================== #
        # choose files button connect click_files
        self.pushButton.clicked.connect(self.click_files)
        
        # upload button connect click_upload
        self.pushButton_2.clicked.connect(self.click_upload)
        
        # search button connect click_search
        self.pushButton_4.clicked.connect(self.click_search)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DICOM - Merge and Search System")) # 置換視窗名稱
        self.pushButton.setText(_translate("MainWindow", "Choose Files"))
        self.pushButton_2.setText(_translate("MainWindow", "Upload"))
        self.label.setText(_translate("MainWindow", "Enter Keyword:"))
        self.pushButton_4.setText(_translate("MainWindow", "Search"))

# =========================================================================== #
    # pushButton
    def click_files(self):
        # 可選擇多個檔案
        import tkinter as tk
        from tkinter import filedialog
        root = tk.Tk()
        root.withdraw()
        
        # 初始設定
        self.pushButton_2.setEnabled(False)
        self.textBrowser.setText("XML file：\n\n\nDICOM file：\n")
        
        # choose xml file
        XML_file_path = filedialog.askopenfilename(
            filetypes = (("XML files","*.xml"),("all files","*.*")), 
            title="Choose XML file") # 會儲存檔案路徑, tuple
        
        if len(XML_file_path) == 0:
            return
        
# =============================================================================
        # code by 天澤        
        att = merge.get_xml_researchgroup(XML_file_path)
        print(att)
        DCM_file_path = merge.search_file(XML_file_path)
        print(DCM_file_path[:2])
        k=0
        for i in DCM_file_path[2]:
            print(merge.add_researchgroup_to_dcm(i, att))
            k += 1
            print(i)
# =============================================================================
        if DCM_file_path[2] == []:
            XML_file_path = ()
            return        

        # 顯示檔案路徑
        self.textBrowser.setText("XML file：\n" + str(XML_file_path) + "\n\n"
                                 + "DICOM file (" + str(len(DCM_file_path[2])) + ")："
                                 + "\n" + str(DCM_file_path[2]))
        
        # 要上傳的內容（合併完的檔案）
        global Upload_file_path
        Upload_file_path = merge.check_and_move_xml(XML_file_path, DCM_file_path[1])
        
        # 開啟upload button
        self.pushButton_2.setEnabled(True)
    
    # pushButton_2
    def click_upload(self):
        URL = 'http://140.135.100.94/orthanc/instances'
        success = 0
        
        fileList = []
        
        # 確認路徑有內容
        if os.path.isfile(Upload_file_path):
            fileList.append(Upload_file_path)
        else:
            for root, dirs, files in os.walk(Upload_file_path):
                for f in files:
                    fileList.append(os.path.join(root, f))
        
        # 將檔案內容存入變數中
        for path in fileList:
            f = open(path, "rb")
            content = f.read()
            f.close()
    
            try:
                sys.stdout.write("Importing %s" % path)
                h = httplib2.Http()
                headers = { 'content-type' : 'application/dicom' }   # 設定資料型態              
                resp, content = h.request(URL, 'POST',              
                                          body = content,
                                          headers = headers) # 上傳檔案至server中
                if resp.status == 200: # 200代表上傳成功
                    sys.stdout.write(" => success\n")
                    success += 1 # 紀錄上傳成功次數
                else:
                    sys.stdout.write(" => failure (Is it a DICOM file?)\n")
                    print(resp.status, resp.reason)
            except: # 有server上的錯誤導致出不來，則顯示下面的字串
                sys.stdout.write(" => unable to connect (Is Orthanc running? Is there a password?)\n")
        
        print("\nSummary: %d DICOM file(s) have been imported" % success)
        self.textBrowser.setText("Summary: %d DICOM file(s) have been imported" % success)
    
    # pushButton_4
    def click_search(self):
        a = "curl http://140.135.100.94/orthanc/instances/"

        def get_orthan_id(url):
            a = os.popen(url)
            b = a.read().split(",")
            c = []
            for i in b:
                c.append(i.split("\"")[1])
            # print(c)
            d = []
            for i in c:
                e = (os.popen(url + i + "/content/0008-1080"))
                d.append(e.read())
            #  print(d)
            return c, d

        def find_tag(look_up_tag, tag_list, id_list):
            index_list = []
            for i in range(len(tag_list)):
                if tag_list[i] == look_up_tag:
                    index_list.append(i)
                    
            result = []
            for i in index_list:
                result.append(id_list[i])
                    
            return result
            
        c, d = get_orthan_id(a)
        ids = find_tag(self.lineEdit.text(), d, c) # 符合關鍵字的內DICOM代號
        # print(ids)
        
# =============================================================================
        # 顯示ids於ScrollArea中，以button的形式
        self.formLayout = QFormLayout()
        self.groupBox = QGroupBox()
        for i in range(len(ids)):
            button = QPushButton(str(ids[i]))
            button.clicked.connect(partial(self.click_link, ids[i])) # 設定button的功能
            self.formLayout.addRow(str(i + 1), button)
        
        self.groupBox.setLayout(self.formLayout)
        self.scrollArea.setWidget(self.groupBox)
        self.scrollArea.setWidgetResizable(True)
    
    # 按下button前往匹配的google連結
    def click_link(self, ID):
        # print(ID)   
        urL='http://140.135.100.94/orthanc/app/explorer.html#instance?uuid=' + ID
        webbrowser.get('windows-default').open_new(urL)
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
